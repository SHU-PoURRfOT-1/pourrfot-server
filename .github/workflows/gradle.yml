# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle and CD with ssh

on:
  push:
    branches-ignore:
      - 'ci-cd/**'
      - 'docs/**'
      - 'dependabot/**'
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Gradle Check
        run:  ./gradlew check
      - name: Report Codecov
        uses: codecov/codecov-action@v1.4.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/reports/jacoco/test/jacocoTestReport.xml
          fail_ci_if_error: false
          verbose: true
      - name: Build with Gradle
        run: ./gradlew build --exclude-task test
      - name: Build And Push Docker Image
        id: buildAndPushImage
        uses: risfeng/docker-image-build-push-action@v1.0
        with:
          registry_url: ${{ secrets.ALIYUN_DOCKER_REGISTRY_HOST }}
          namespaces: ${{ secrets.ALIYUN_DOCKER_REGISTRY_NAMESPACE }}
          repository_name: 'pourrfot-server'
          user_name: ${{ secrets.ALIYUN_DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_DOCKER_REGISTRY_PASSWORD }}
          image_version: latest
          docker_file: '.'
      - name: Get pre step result output image_pull_url
        id: result
        run: echo "The image pull url was ${{ steps.buildAndPushImage.outputs.image_pull_url }}"
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Aliyun LightHouse
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ALIYUN_LIGHTHOUSE_HOST }}
          username: ${{ secrets.ALIYUN_LIGHTHOUSE_USERNAME }}
          key: ${{ secrets.ALIYUN_LIGHTHOUSE_KEY }}
          script: |
            export IMAGE_URL='${{ secrets.ALIYUN_DOCKER_REGISTRY_HOST }}/${{ secrets.ALIYUN_DOCKER_REGISTRY_NAMESPACE }}/pourrfot-server:latest'
            docker stop $(docker ps --filter name=pourrfot-server -q) || true
            docker rm -f $(docker ps -a --filter name=pourrfot-server -q) || true
            docker pull $IMAGE_URL
            docker run \
              -d \
              -p 9000:9000 \
              --name pourrfot-server \
              --env SPRING_DATASOURCE_URL=${{ secrets.ALIYUN_RDS_CONNECTION_URL }} \
              --env SPRING_DATASOURCE_PASSWORD=${{ secrets.ALIYUN_RDS_POURRFOT_PASSWORD }} \
              --env ALIYUN_ACCESSKEYID=${{ secrets.ALIYUN_ACCESS_KEY_ID }} \
              --env ALIYUN_ACCESSKEYSECRET=${{ secrets.ALIYUN_ACCESS_KEY_SECRET }} \
              --env ALIYUN_OSS_ENDPOINT=${{ secrets.ALIYUN_OSS_ENDPOINT }} \
              $IMAGE_URL
